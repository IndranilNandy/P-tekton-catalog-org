apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: build-n-deploy-pipeline
spec:
  params:
    # For git-clone task
    - name: git-clone
      type: object
      description: Git repo specific details
      properties:
        url:
          type: string
        revision:
          type: string
        refspec:
          type: string
        submodules:
          type: string
        depth:
          type: string
        sslVerify:
          type: string
        crtFileName:
          type: string
        subdirectory:
          type: string
        sparseCheckoutDirectories:
          type: string
        deleteExisting:
          type: string
        httpProxy:
          type: string
        httpsProxy:
          type: string
        noProxy:
          type: string
        verbose:
          type: string
        gitInitImage:
          type: string
        userHome:
          type: string
      default:
        url: "git@github.com:IndranilNandy/demo-app-to-test-pipeline"
        revision: "master"
        refspec: ""
        submodules: "true"
        depth: "1"
        sslVerify: "true"
        crtFileName: "ca-bundle.crt"
        subdirectory: ""
        sparseCheckoutDirectories: ""
        deleteExisting: "true"
        httpProxy: ""
        httpsProxy: ""
        noProxy: ""
        verbose: "true"
        gitInitImage: "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.44.5"
        userHome: "/home/git"

    # For gradle task
    - name: gradle
      type: object
      description: Parameters of gradle task
      properties:
        gradle-image:
          type: string
        project-dir:
          type: string
        # Currently 'array' key-type not supported
        # tasks:
        #   type: array
        gradle-user-home:
          type: string
        project-build-dir:
          type: string
      default:
        gradle-image: "gradle:8.7.0-jdk17"
        project-dir:  "."
        # tasks:
        #   - "build"
        gradle-user-home: "/home/gradle"
        project-build-dir: "$(params.common.build-artifacts-root)/$(params.common.project-build-dir-name)"
    - name: gradle-params-tasks
      type: array
      default:
        - build

    # For kaniko-warmer task
    - name: kaniko-warmer
      type: object
      description: Parameters of kaniko-warmer task
      properties:
        kaniko-cachedir:
          type: string
        dockerfile:
          type: string
      default:
        kaniko-cachedir: "$(params.kaniko.kaniko-cachedir)"
        dockerfile: "$(params.kaniko.dockerfile)"

    # For kaniko task
    - name: kaniko
      type: object
      description: Parameters of kaniko task
      properties:
        image:
          type: string
        image-tag:
          type: string
        dockerfile:
          type: string
        context:
          type: string
        builder-image:
          type: string
        kaniko-cachedir:
          type: string
        gradle-user-home:
          type: string
        docker-internal-cache-location:
          type: string
        docker-context-cache-location:
          type: string
      default:
        # image-tag: "$(tasks.build-pipeline.results.repo-details.commit)"
        context: "."
        gradle-user-home: "/root/.gradle"
        docker-internal-cache-location: "/workspace/binary"
        docker-context-cache-location: "$(params.common.build-artifacts-root)"
    - name: kaniko-params-extra-args
      type: array

    # github-open-pr commons
    - name: github-open-pr
      type: object
      properties:
        github-host-url:
          type: string
        repo-full-name:
          type: string
        github-token-secret-name:
          type: string
        github-token-secret-key:
          type: string
        head:
          type: string
        base:
          type: string
        title:
          type: string
        body:
          type: string
      default:
        github-host-url: "api.github.com"
        # repo-full-name:
        # github-token-secret-name:
        # github-token-secret-key:
        head: "NA"
        base: "master"
        title: "Pull request default title"
        body: "Pull request default body"

    # Pipeline commons
    - name: common
      type: object
      properties:
        build-artifacts-root:
          type: string
        project-build-dir-name:
          type: string
        create-pr:
          type: string
      default:
        build-artifacts-root: "/tmp/myproject/build-artifacts"
        project-build-dir-name: "build"
        create-pr: "false"

      # Debugging purpose
    - name: debug
      type: object
      description: all debug switches and properties
      properties:
        clone-source-repo-disabled:
          type: string
        build-test-publish-artifacts-disabled:
          type: string
        kaniko-warmer-disabled:
          type: string
        kaniko-build-and-push-image-disabled:
          type: string
      default:
        clone-source-repo-disabled: "false"
        build-test-publish-artifacts-disabled: "false"
        kaniko-warmer-disabled: "false"
        kaniko-build-and-push-image-disabled: "false"

  workspaces:
    - name: shared-workspace
    # - name: git-ssh-credentials
    - name: docker-credentials

  results:
    - name: repo-details
      type: object
      description: "repo details of source codebase"
      value: "$(tasks.build-pipeline.results.repo-details)"
    - name: pr-details
      type: object
      description: "detailes of created pr"
      value: "$(tasks.build-pipeline.results.pr-details)"

    # 'pipelines-in-pipelines' feature doesn't support 'object' results. Hence, declaring 'string' results also
    - name: repo-url
      value: "$(tasks.build-pipeline.results.repo-url)"
    - name: repo-commit
      value: "$(tasks.build-pipeline.results.repo-commit)"
    - name: repo-committer-date
      value: "$(tasks.build-pipeline.results.repo-committer-date)"

    - name: pr-number
      value: "$(tasks.build-pipeline.results.pr-number)"
    - name: pr-url
      value: "$(tasks.build-pipeline.results.pr-url)"
    - name: pr-head-sha
      value: "$(tasks.build-pipeline.results.pr-head-sha)"

  tasks:
    - name: build-pipeline
      params:
        # For git-clone task
        - name: git-clone
          value:
            # url: "git@github.com:IndranilNandy/demo-app-to-test-pipeline"
            # revision: "master"
            url: "$(params.git-clone.url)"
            revision: "$(params.git-clone.revision)"

        # For gradle task
        - name: gradle
          value:
            # gradle-image: "gradle:8.7.0-jdk17"
            # project-dir: "."
            gradle-image: "$(params.gradle.gradle-image)"
            project-dir: "$(params.gradle.project-dir)"
        - name: gradle-params-tasks
          value: ["$(params.gradle-params-tasks)"]
            # - build
            # - publish
            # - -PbuildDir=$(params.common.build-artifacts-root)/$(params.common.project-build-dir-name)
            # - --console=verbose
            # # - --status
            # # no improvement with --no-daemon; also gradle now doesn't suggest to disable daemong in CI
            # # - --no-daemon

        # For github-open-pr task
        - name: github-open-pr
          value:
            github-host-url: "$(params.github-open-pr.github-host-url)"
            repo-full-name: "$(params.github-open-pr.repo-full-name)"
            github-token-secret-name: "$(params.github-open-pr.github-token-secret-name)"
            github-token-secret-key: "$(params.github-open-pr.github-token-secret-key)"
            head: "$(params.github-open-pr.head)"
            base: "$(params.github-open-pr.base)"
            title: "$(params.github-open-pr.title)"
            body: "$(params.github-open-pr.body)"

        # Pipeline commons
        - name: common
          value:
            # build-artifacts-root: "/tmp/myproject/build-artifacts"
            # project-build-dir-name: "build"
            build-artifacts-root: "$(params.common.build-artifacts-root)"
            project-build-dir-name: "$(params.common.project-build-dir-name)"
            create-pr: "$(params.common.create-pr)"

        # Debugging purpose
        - name: debug
          value:
            # clone-source-repo-disabled: "false"
            # build-test-publish-artifacts-disabled: "false"
            clone-source-repo-disabled: "$(params.debug.clone-source-repo-disabled)"
            build-test-publish-artifacts-disabled: "$(params.debug.build-test-publish-artifacts-disabled)"

      workspaces:
        - name: shared-workspace
          workspace: shared-workspace

      taskRef:
        apiVersion: tekton.dev/v1beta1
        kind: Pipeline
        name: build-pipeline
        # resolver: git
        # params:
        #   - name: repo
        #     value: P-tekton-catalog-org
        #   - name: pathInRepo
        #     value: pip/build-pipeline.yaml

    - name: deploy-pipeline
      params:
        # For kaniko-warmer task
        - name: kaniko-warmer
          value:
            kaniko-cachedir: "$(params.kaniko-warmer.kaniko-cachedir)"
            dockerfile: "$(params.kaniko-warmer.dockerfile)"

        # For kaniko task
        - name: kaniko
          value:
            image: "$(params.kaniko.image)"
            # image-tag: "$(tasks.build-pipeline.results.repo-details.commit)"
            image-tag: "$(tasks.build-pipeline.results.repo-commit)"
            # image-tag: "$(params.kaniko.image-tag)"
            dockerfile: "$(params.kaniko.dockerfile)"
            context: "$(params.kaniko.context)"
            builder-image: "$(params.kaniko.builder-image)"
            kaniko-cachedir: "$(params.kaniko.kaniko-cachedir)"
            gradle-user-home: "$(params.kaniko.gradle-user-home)"
            docker-internal-cache-location: "$(params.kaniko.docker-internal-cache-location)"
            docker-context-cache-location: "$(params.kaniko.docker-context-cache-location)"
        - name: kaniko-params-extra-args
          value: ["$(params.kaniko-params-extra-args)"]

        # Debugging purpose
        - name: debug
          value:
            kaniko-warmer-disabled: "$(params.debug.kaniko-warmer-disabled)"
            kaniko-build-and-push-image-disabled: "$(params.debug.kaniko-build-and-push-image-disabled)"
      workspaces:
        - name: shared-workspace
          workspace: shared-workspace
        - name: docker-credentials
          workspace: docker-credentials

      taskRef:
        apiVersion: tekton.dev/v1beta1
        kind: Pipeline
        name: deploy-pipeline

      runAfter:
        - "build-pipeline"