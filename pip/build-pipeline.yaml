apiVersion: tekton.dev/v1
# apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: build-pipeline
spec:
  params:
    # For git-clone task
    - name: git-clone
      type: object
      description: Git repo specific details
      properties:
        url:
          type: string
        revision:
          type: string
        refspec:
          type: string
        submodules:
          type: string
        depth:
          type: string
        sslVerify:
          type: string
        crtFileName:
          type: string
        subdirectory:
          type: string
        sparseCheckoutDirectories:
          type: string
        deleteExisting:
          type: string
        httpProxy:
          type: string
        httpsProxy:
          type: string
        noProxy:
          type: string
        verbose:
          type: string
        gitInitImage:
          type: string
        userHome:
          type: string
      default:
        url: "git@github.com:IndranilNandy/demo-app-to-test-pipeline"
        revision: "master"
        refspec: ""
        submodules: "true"
        depth: "1"
        sslVerify: "true"
        crtFileName: "ca-bundle.crt"
        subdirectory: ""
        sparseCheckoutDirectories: ""
        deleteExisting: "true"
        httpProxy: ""
        httpsProxy: ""
        noProxy: ""
        verbose: "true"
        gitInitImage: "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.44.5"
        userHome: "/home/git"

    # For gradle task
    - name: gradle
      type: object
      description: Parameters of gradle task
      properties:
        gradle-image:
          type: string
        project-dir:
          type: string
        # Currently 'array' key-type not supported
        # tasks:
        #   type: array
        gradle-user-home:
          type: string
        project-build-dir:
          type: string
      default:
        gradle-image: "gradle:8.7.0-jdk17"
        project-dir: "."
        # tasks:
        #   - "build"
        gradle-user-home: "/home/gradle"
        project-build-dir: "$(params.common.build-artifacts-root)/$(params.common.project-build-dir-name)"
    - name: gradle-params-tasks
      type: array
      default:
        - build

    # For github-open-pr
    - name: github-open-pr
      type: object
      properties:
        github-host-url:
          type: string
        repo-full-name:
          type: string
        github-token-secret-name:
          type: string
        github-token-secret-key:
          type: string
        head:
          type: string
        base:
          type: string
        title:
          type: string
        body:
          type: string
      default:
        github-host-url: "api.github.com"
        # repo-full-name:
        # github-token-secret-name:
        # github-token-secret-key:
        head: "NA"
        base: "master"
        title: "Pull request default title"
        body: "Pull request default body"

    # Pipeline commons
    - name: common
      type: object
      properties:
        build-artifacts-root:
          type: string
        project-build-dir-name:
          type: string
        create-pr:
          type: string
      default:
        build-artifacts-root: "/tmp/myproject/build-artifacts"
        project-build-dir-name: "build"
        create-pr: "false"

      # Debugging purpose
    - name: debug
      type: object
      description: all debug switches and properties
      properties:
        clone-source-repo-disabled:
          type: string
        build-test-publish-artifacts-disabled:
          type: string
      default:
        clone-source-repo-disabled: "false"
        build-test-publish-artifacts-disabled: "false"

    - name: ws-subpath
      type: object
      description: configurable sub-paths of workspaces
      properties:
        source-code:
          type: string
      default:
        source-code: "source-code/"

  workspaces:
    - name: shared-workspace
    # - name: git-ssh-credentials

  results:
    - name: repo-details
      type: object
      description: "repo details of source codebase"
      value: "$(finally.results-clone-source-repo.results.repo-details)"
    - name: pr-details
      type: object
      description: "detailes of created pr"
      value: "$(finally.results-create-pr.results.pr-details)"

    # 'pipelines-in-pipelines' feature doesn't support 'object' results. Hence, declaring 'string' results also
    - name: repo-url
      value: "$(tasks.clone-source-repo.results.url)"
      # value: "$(finally.results-clone-source-repo.results.repo-details.url)"
    - name: repo-commit
      value: "$(tasks.clone-source-repo.results.commit)"
      # value: "$(finally.results-clone-source-repo.results.repo-details.commit)"
    - name: repo-committer-date
      value: "$(tasks.clone-source-repo.results.committer-date)"
      # value: "$(finally.results-clone-source-repo.results.repo-details.committer-date)"

    - name: pr-number
      value: "$(tasks.create-pr.results.NUMBER)"
      # value: "$(finally.results-create-pr.results.pr-details.number)"
    - name: pr-url
      value: "$(tasks.create-pr.results.URL)"
      # value: "$(finally.results-create-pr.results.pr-details.url)"
    - name: pr-head-sha
      value: "$(tasks.create-pr.results.E_HEAD_SHA)"
      # value: "$(finally.results-create-pr.results.pr-details.head-sha)"

  tasks:
    - name: pipeline-ctx
      taskSpec:
        steps:
          - name: ctx
            image: mirror.gcr.io/ubuntu
            script: |
              echo "Pipeline: $(context.pipeline.name)"
              echo "PipelineRun: $(context.pipelineRun.name)"
              echo "PipelineRun uid: $(context.pipelineRun.uid)"
              echo "PipelineRun namespace: $(context.pipelineRun.namespace)"

    - name: clone-source-repo
      when:
        - input: "$(params.debug.clone-source-repo-disabled)"
          operator: in
          values:
            - "false"
      taskRef:
        resolver: git
        params:
          - name: repo
            value: P-tekton-catalog-org
          - name: pathInRepo
            value: task/scm/git-clone/git-clone.yaml

      params:
        - name: url
          value: "$(params.git-clone.url)"
        - name: revision
          value: "$(params.git-clone.revision)"
        - name: depth
          value: "$(params.git-clone.depth)"
      workspaces:
        - name: output
          workspace: shared-workspace
          subPath: "$(params.ws-path.source-code)"
          # subPath: source-code/

      runAfter:
        - "pipeline-ctx"

    - name: build-test-publish-artifacts
      when:
        - input: "$(params.debug.build-test-publish-artifacts-disabled)"
          operator: in
          values:
            - "false"
      taskRef:
        resolver: git
        params:
          - name: repo
            value: P-tekton-catalog-org
          - name: pathInRepo
            value: task/build-tool/gradle/gradle.yaml

      params:
        - name: GRADLE_IMAGE
          value: "$(params.gradle.gradle-image)"
        - name: PROJECT_DIR
          value: "$(params.gradle.project-dir)"
        - name: TASKS
          value: ["$(params.gradle-params-tasks)"]
        - name: E_PROJECT_BUILD_DIR_CUSTOM
          value: "$(params.gradle.project-build-dir)"
          # value: "$(params.common.build-artifacts-root)/$(params.common.project-build-dir-name)"
        - name: E_GRADLE_USER_HOME
          value: "$(params.gradle.gradle-user-home)"

      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: "$(params.ws-path.source-code)"
          # subPath: source-code/
        - name: e-gradle-user-home-cache
          workspace: shared-workspace
          subPath: gradle-cache/user-home/
        - name: e-gradle-project-build-cache
          workspace: shared-workspace
          subPath: gradle-cache/project/artifacts-cache/$(params.common.project-build-dir-name)
        - name: e-gradle-project-local-cache
          workspace: shared-workspace
          subPath: gradle-cache/project/local-cache/

      runAfter:
        - "clone-source-repo"

    - name: create-pr
      when:
        - input: "$(params.common.create-pr)"
          operator: in
          values:
            - "true"
      params:
        - name: GITHUB_HOST_URL
          value: "$(params.github-open-pr.github-host-url)"
        - name: REPO_FULL_NAME
          value: "$(params.github-open-pr.repo-full-name)"
        - name: GITHUB_TOKEN_SECRET_NAME
          value: "$(params.github-open-pr.github-token-secret-name)"
        - name: GITHUB_TOKEN_SECRET_KEY
          value: "$(params.github-open-pr.github-token-secret-key)"
        - name: HEAD
          value: "$(params.github-open-pr.head)"
        - name: BASE
          value: "$(params.github-open-pr.base)"
        - name: TITLE
          value: "$(params.github-open-pr.title)"
        - name: BODY
          value: "$(params.github-open-pr.body)"

      taskRef:
        resolver: git
        params:
          - name: repo
            value: P-tekton-catalog-org
          - name: pathInRepo
            value: task/scm/github-open-pr/github-open-pr.yaml

      runAfter:
        - "build-test-publish-artifacts"

  finally:
    - name: all-tasks-status
      displayName: "Status"
      params:
        - name: aggregateTasksStatus
          value: "$(tasks.status)"
      taskSpec:
        params:
          - name: aggregateTasksStatus
        steps:
          - name: status
            image: mirror.gcr.io/ubuntu
            script: |
              echo "Tasks status: $(params.aggregateTasksStatus)"
    - name: report-pipeline-failure
      when:
        - input: "$(tasks.status)"
          operator: in
          values:
            - "Failed"
            - "None"
      params:
        - name: clone-source-repo-status
          value: "$(tasks.clone-source-repo.status)"
        - name: build-test-publish-artifacts-status
          value: "$(tasks.build-test-publish-artifacts.status)"
        - name: create-pr-status
          value: "$(tasks.create-pr.status)"
      taskSpec:
        params:
          - name: clone-source-repo-status
          - name: build-test-publish-artifacts-status
          - name: create-pr-status
        steps:
          - name: failed
            image: mirror.gcr.io/ubuntu
            script: |
              echo "One or more tasks failed"
              echo task: clone-source-repo \t\t\tstatus: $(params.clone-source-repo-status)"
              echo "task: build-test-publish-artifacts \t\tstatus: $(params.build-test-publish-artifacts-status)"
              echo "task: create-pr \t\tstatus: $(params.create-pr-status)"
              echo
              echo "[ToDo] Notify on slack channel (use tekton task for slack)"
    - name: report-pipeline-success
      when:
        - input: "$(tasks.status)"
          operator: in
          values:
            - "Succeeded"
            - "Completed"
      params:
        - name: clone-source-repo-status
          value: "$(tasks.clone-source-repo.status)"
        - name: build-test-publish-artifacts-status
          value: "$(tasks.build-test-publish-artifacts.status)"
        - name: create-pr-status
          value: "$(tasks.create-pr.status)"
      taskSpec:
        params:
          - name: clone-source-repo-status
          - name: build-test-publish-artifacts-status
          - name: create-pr-status
        steps:
          - name: success
            image: mirror.gcr.io/ubuntu
            script: |
              echo "All tasks passed"
              echo "task: clone-source-repo \t\t\tstatus: $(params.clone-source-repo-status)"
              echo "task: build-test-publish-artifacts \t\tstatus: $(params.build-test-publish-artifacts-status)"
              echo "task: create-pr \t\tstatus: $(params.create-pr-status)"
              echo
              echo "[ToDo] Notify on slack channel (use tekton task for slack)"

    # - name: aggregate-results
    #   when:
    #     - input: "$(tasks.status)"
    #       operator: in
    #       values:
    #         # - "Succeeded"
    #         - "Completed"
    #         # "Completed" is NOT allowed, since some tasks may be skipped due to when condition and corresponding results would not be available, and this task would never start
    #   params:
    #     - name: clone-source-repo-status
    #       value: "$(tasks.clone-source-repo.status)"
    #     - name: build-test-publish-artifacts-status
    #       value: "$(tasks.build-test-publish-artifacts.status)"
    #     - name: create-pr-status
    #       value: "$(tasks.create-pr.status)"
    #   taskSpec:
    #     params:
    #       - name: clone-source-repo-status
    #       - name: build-test-publish-artifacts-status
    #       - name: create-pr-status
    #     results:
    #       - name: repo-details
    #         type: object
    #         properties:
    #           url:
    #             type: string
    #           commit:
    #             type: string
    #           committer-date:
    #             type: string
    #       - name: pr-details
    #         type: object
    #         properties:
    #           number:
    #             type: string
    #           url:
    #             type: string
    #           head-sha:
    #             type: string
    #     steps:
    #       - name: write-result
    #         image: bash:latest
    #         script: |
    #           #!/usr/bin/env bash
    #           [[ $(params.clone-source-repo-status) == "Succeeded" ]] && echo -n "{\"url\":\"$(tasks.clone-source-repo.results.url)\",\"commit\":\"$(tasks.clone-source-repo.results.commit)\",\"committer-date\":\"$(tasks.clone-source-repo.results.committer-date)\"}" | tee $(results.repo-details.path)
    #           echo
    #           [[ $(params.create-pr-status) == "Succeeded" ]] && echo -n "{\"number\":\"$(tasks.create-pr.results.NUMBER)\",\"url\":\"$(tasks..create-pr.results.URL)\",\"head-sha\":\"$(tasks..create-pr.results.E_HEAD_SHA)\"}" | tee $(results.pr-details.path)
    #           # echo revision="$(params.git-clone.revision)"
    #           # echo build-dir="$(params.gradle.project-build-dir)"

    - name: results-clone-source-repo
      when:
        - input: "$(tasks.clone-source-repo.status)"
          operator: in
          values:
            - "Succeeded"
            # "Completed" is NOT allowed, since some tasks may be skipped due to when condition and corresponding results would not be available, and this task would never start
      params:
        - name: clone-source-repo-status
          value: "$(tasks.clone-source-repo.status)"
      taskSpec:
        params:
          - name: clone-source-repo-status
        results:
          - name: repo-details
            type: object
            properties:
              url:
                type: string
              commit:
                type: string
              committer-date:
                type: string
        steps:
          - name: write-result
            image: bash:latest
            script: |
              #!/usr/bin/env bash
              [[ $(params.clone-source-repo-status) == "Succeeded" ]] && echo -n "{\"url\":\"$(tasks.clone-source-repo.results.url)\",\"commit\":\"$(tasks.clone-source-repo.results.commit)\",\"committer-date\":\"$(tasks.clone-source-repo.results.committer-date)\"}" | tee $(results.repo-details.path)
              echo

    - name: results-create-pr
      when:
        - input: "$(tasks.create-pr.status)"
          operator: in
          values:
            - "Succeeded"
            # "Completed" is NOT allowed, since some tasks may be skipped due to when condition and corresponding results would not be available, and this task would never start
      params:
        - name: create-pr-status
          value: "$(tasks.create-pr.status)"
      taskSpec:
        params:
          - name: create-pr-status
        results:
          - name: pr-details
            type: object
            properties:
              number:
                type: string
              url:
                type: string
              head-sha:
                type: string
        steps:
          - name: write-result
            image: bash:latest
            script: |
              #!/usr/bin/env bash
              [[ $(params.create-pr-status) == "Succeeded" ]] && echo -n "{\"number\":\"$(tasks.create-pr.results.NUMBER)\",\"url\":\"$(tasks.create-pr.results.URL)\",\"head-sha\":\"$(tasks.create-pr.results.E_HEAD_SHA)\"}" | tee $(results.pr-details.path)
              echo
