apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: kaniko
  labels:
    app.kubernetes.io/version: "0.6"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Image Build
    tekton.dev/tags: image-build
    tekton.dev/displayName: "Build and upload container image using Kaniko"
    tekton.dev/platforms: "linux/amd64,linux/arm64,linux/ppc64le"
spec:
  description: >-
    This Task builds a simple Dockerfile with kaniko and pushes to a registry.
    This Task stores the image name and digest as results, allowing Tekton Chains to pick up
    that an image was built & sign it.

  params:
    - name: IMAGE
      description: Name (reference) of the image to build.
    - name: DOCKERFILE
      description: Path to the Dockerfile to build.
      default: ./Dockerfile
    - name: CONTEXT
      description: The build context used by Kaniko.
      default: ./
    - name: EXTRA_ARGS
      type: array
      default: []
    - name: BUILDER_IMAGE
      description: The image on which builds will run (default is v1.5.1)
      default: gcr.io/kaniko-project/executor:v1.5.1@sha256:c6166717f7fe0b7da44908c986137ecfeab21f31ec3992f6e128fff8a94be8a5
    - name: E_KANIKO_CACHE_DIR
      description: Location of the local cache
      default: /cache
    - name: E_GRADLE_USER_HOME
      description: Location of gradle dependency cache
      default: /root/.gradle
    - name: E_DOCKERFILE_SPECIFIC_CACHE_LOCATION
      description: This is needed for multi-staged building to cache the build binary. Value depends on the dockerfile instructions.
      default: /workspace/binary
    - name: E_PROJECT_BUILD_ARTIFACT_ROOT_CACHE_LOCATION
      description: Docker context path holding all build artifacts (e.g. build), sources etc. This is used as the docker context to copy contents (like build-binaries) from.
      default: /tmp/myproject

  workspaces:
    - name: source
      description: Holds the context and Dockerfile
    - name: dockerconfig
      description: Includes a docker `config.json`
      optional: true
      mountPath: /kaniko/.docker

    - name: e_kaniko_cache
      description: Holds the cache used by kaniko to store image layers etc.
      mountPath: "$(params.E_KANIKO_CACHE_DIR)"
    - name: e_docker_internal_cache
      description: Holds any artifacts generated by the dockerfile during run (e.g. binary)
      mountPath: "$(params.E_DOCKERFILE_SPECIFIC_CACHE_LOCATION)"
    - name: e_gradle_cache
      description: Holds gradle dependencies to be cached. Mainly used for a multi-staged dockerfile building the code in a separate stage.
      mountPath: "$(params.E_GRADLE_USER_HOME)"
    - name: e_project_build_artifact_root_cache
      description: |
        - Holds gradle build generated artifacts including build-binary for faster successive builds.
        - REMEMBER this location MUST NOT be a sub-directory of project root. In that case git-clone task will erase it every time, and gradle incremental task will not be effective.
      mountPath: "$(params.E_PROJECT_BUILD_ARTIFACT_ROOT_CACHE_LOCATION)"
      optional: true

  results:
    - name: IMAGE_DIGEST
      description: Digest of the image just built.
    - name: IMAGE_URL
      description: URL of the image just built.

  steps:
    - name: ctx
      ref:
        resolver: git
        params:
          - name: repo
            value: P-tekton-catalog-org
          - name: pathInRepo
            value: stepaction/context/task-context/task-context.yaml
    - name: build-and-push
      workingDir: $(workspaces.source.path)
      image: $(params.BUILDER_IMAGE)
      args:
        - $(params.EXTRA_ARGS)
        - --dockerfile=$(params.DOCKERFILE)
        - --context=$(params.CONTEXT) # The user does not need to care the workspace and the source.
        # - --context=$(workspaces.e_project_build_artifact_root_cache.path)/$(params.CONTEXT) # The user does not need to care the workspace and the source.
        # - --context=$(workspaces.source.path)/$(params.CONTEXT) # The user does not need to care the workspace and the source.
        - --destination=$(params.IMAGE)
        - --digest-file=$(results.IMAGE_DIGEST.path)
      # kaniko assumes it is running as root, which means this example fails on platforms
      # that default to run containers as random uid (like OpenShift). Adding this securityContext
      # makes it explicit that it needs to run as root.
      securityContext:
        runAsUser: 0

    - name: write-url
      image: docker.io/library/bash:5.1.4@sha256:c523c636b722339f41b6a431b44588ab2f762c5de5ec3bd7964420ff982fb1d9
      script: |
        set -e
        image="$(params.IMAGE)"
        echo -n "${image}" | tee "$(results.IMAGE_URL.path)"
