apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: gradle
  labels:
    app.kubernetes.io/version: "0.4"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/displayName: Gradle
    tekton.dev/categories: Build Tools
    tekton.dev/tags: build-tool
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  description: >-
    This Task can be used to run a Gradle build.

  workspaces:
    - name: source
      description: The workspace consisting of the gradle project.
    - name: gradle-config
      description: The workspace consisting of the custom gradle properties provided by the user.
      optional: true

      # Ref. https://docs.gradle.org/current/userguide/gradle_directories.html
    - name: e-gradle-user-home-cache
      description: |
        [Tag: FAST BUILD]
        - Use this for FAST BUILD setup.
        - Stores global configuration properties, initialization scripts, caches, and log files.
        - Use this for usecases like caching gradle dependencies.
        - Since this is mandatory gradle dependencies will be cached always, and it'll speed up build unless dynamic pvc is passed.
      mountPath: $(params.E_GRADLE_USER_HOME)
      optional: false
    - name: e-gradle-project-build-cache
      description: |
        [Tag: FAST BUILD]
        - Use this for FAST BUILD setup.
        - Holds project build to speed up successive builds using gradle incremental task.
        - Use this for usecases like caching build binaries to speed up 'gradle build' when you aren't using 'gradle clean build'
          This has to be done in conjunction with passing -PbuildDir=<custom-build-dir-location> to TASKS parameter of gradle task
        - DO NOT SUPPLY THIS WORKSPACE from TaskRun/PipelineRun if you want to BUILD AFRESH.
        - Remember that if you don't pass -PbuildDir=<custom-build-dir-location>, and you provide this workspace, it will be mounted on default E_PROJECT_BUILD_DIR_CUSTOM.
          But, the gradle build-binary will NOT be stored in this location, rather in PROJECT_DIR/build folder.
          So, effectively this workspace will NOT HOLD the build binary.
      mountPath: $(params.E_PROJECT_BUILD_DIR_CUSTOM)
      optional: true
    - name: e-gradle-project-local-cache
      description: |
        [Tag: FAST BUILD]
        - Use this for FAST BUILD setup.
        - Holds project specific cache directory (.gradle) generated by Gradle.
          This is needed along with e-gradle-project-build-cache to support incremental task.
        - Use this for usecases like speeding up gradle build using incremental tasks.
        - DO NOT SUPPLY THIS WORKSPACE from TaskRun/PipelineRun if you want to BUILD AFRESH.
        - Remember that if you don't pass -PbuildDir=<custom-build-dir-location>, and you provide this workspace, project specific .gradle will be cached.
          But, since gradle build-binary is NOT effectively cached (see e-gradle-project-build-cache) in this case, 'incremental tasks' will NOT be effective.
      mountPath: $(workspaces.source.path)/$(params.PROJECT_DIR)/.gradle
      optional: true

  params:
    - name: GRADLE_IMAGE
      description: Gradle base image.
      type: string
      default: docker.io/library/gradle:7.6-jdk8@sha256:ebda657f66e04cfa9f152896b4fa70bea4b80561a836adddca3ed85d622f8898
    - name: PROJECT_DIR
      description: The directory containing build.gradle
      type: string
      default: "."
    - name: TASKS
      description: 'The gradle tasks to run (default: build)'
      type: array
      default:
        - build
      # NOTE: Fields prefixed with E_ (for Extras) are added on top of original catalog tasks for more customization
    - name: E_GRADLE_USER_HOME
      description: Location of gradle dependency cache
      default: /home/gradle
    - name: E_PROJECT_BUILD_DIR_CUSTOM
      description: |
        - Project build directory location if customized for 'fast build'.
        - REMEMBER this location should NOT be a sub-directory of project root. In that case git-clone task will erase it (build) every time, and gradle incremental task will not be effective.
      default: "/tmp/project/build"
      # This can only be for fresh build
      # default: "build"
    # - name: E_FAST_BUILD_SUPPORT
    #   description: |
    #     [Tag: FAST BUILD]
    #     - Use this for FAST BUILD setup.
    #     - As of now due to some tekton variable substitution limitations this CAN NOT BE USED as a single point switch/entry to enable
    #         1. gradle dependency caching (e-gradle-user-home-cache),
    #         2. caching build (e-gradle-project-build-cache),
    #         3. supporting incremental task (e-gradle-project-local-cache)
    #       Need to follow these steps to enable all caching and features.
    #       a. just by enabling this flag, gradle binary build location is customized so that a pvc can cache it.
    #       b. need to explicitly pass all the three workspaces to enable all features and caching.
    #         - e-gradle-user-home-cache
    #         - e-gradle-project-build-cache
    #         - e-gradle-project-local-cache
    #   type: string
    #   default: "false"

  results:
      - name: placeholder
        description: The precise commit SHA that was fetched by this Task.

  steps:
    - name: ctx
      ref:
        resolver: git
        params:
          - name: repo
            value: P-tekton-catalog-org
          - name: pathInRepo
            value: stepaction/context/task-context/task-context.yaml
    - name: gradle-tasks
      image: $(params.GRADLE_IMAGE)
      env:
        - name: GRADLE_USER_HOME
          value: $(params.E_GRADLE_USER_HOME)
          # value: "/home/gradle"
      workingDir: $(workspaces.source.path)/$(params.PROJECT_DIR)
      args:
        - "$(params.TASKS)"
      script: |
        #!/usr/bin/env bash
        echo -e "User: $(whoami)"
        echo -e "GRADLE_USER_HOME: $GRADLE_USER_HOME"
        if [[ "$(workspaces.gradle-config.bound)" == "true" ]]; then
          echo "gradle-config workspace is bound"
          if [[ -f $(workspaces.gradle-config.path)/gradle.properties ]]; then
            echo "copying gradle.properties to $GRADLE_USER_HOME"
            cp "$(workspaces.gradle-config.path)/gradle.properties" "$GRADLE_USER_HOME"
          fi
        fi

        if [[ -f gradlew ]]; then
          cmd="./gradlew $*"
        else
          cmd="gradle $*"
        fi

        echo "Running gradle task with command below"
        echo "$cmd"
        eval "$cmd"

        printf "%s" "dummy value" > "$(results.placeholder.path)"
